// Generated by redfish-codegen. Do not modify.

{{#moduleContext}}
{{#imports}}
use {{{path}}};
{{/imports}}
{{/moduleContext}}

{{#docComment}}
/// {{{docComment}}}
{{/docComment}}
#[derive(Clone, Debug, serde::Deserialize, serde::Serialize)]
{{#structContext}}
#[derive(derivative::Derivative)]
#[derivative(Default)]
pub struct {{name}} {
{{#properties}}
{{#docComment}}
    /// {{{docComment}}}
{{/docComment}}
{{#serdeName}}
    #[serde(rename = "{{{serdeName}}}")]
{{/serdeName}}
{{#skipDeserializing}}
    #[serde(skip_deserializing)]
{{/skipDeserializing}}
{{#defaultValue}}
    #[derivative(Default(value = "{{{defaultValue}}}"))]
{{/defaultValue}}
{{#optional}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub {{name}}: Option<{{{type}}}>,
{{/optional}}
{{^optional}}
    pub {{name}}: {{{type}}},
{{/optional}}
{{/properties}}
}
{{/structContext}}
{{#enumContext}}
{{^tagged}}
#[serde(untagged)]
{{/tagged}}
pub enum {{name}} {
{{#variants}}
{{#docComment}}
    /// {{{docComment}}}
{{/docComment}}
{{#serdeName}}
    #[serde(rename = "{{{serdeName}}}")]
{{/serdeName}}
    {{name}}{{#type}}({{type}}){{/type}},
{{/variants}}
}

#[allow(clippy::derivable_impls)]
impl Default for {{name}} {
     fn default() -> {{name}} {
        {{name}}::{{#defaultVariant}}{{name}}{{#type}}({{type}}::default()){{/type}}{{/defaultVariant}}
     }
}
{{/enumContext}}
{{#tupleContext}}
#[derive(Default)]
pub struct {{name}}(pub {{type}});
{{/tupleContext}}
{{#unitContext}}
pub struct {{name}};
{{/unitContext}}
{{#metadata}}

impl crate::Metadata<'static> for {{name}} {
    const JSON_SCHEMA: &'static str = "{{{jsonSchema}}}";
}
{{/metadata}}
