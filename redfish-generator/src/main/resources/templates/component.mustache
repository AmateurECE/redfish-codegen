// Generated by redfish-codegen. Do not modify.
// Author: Ethan D. Twardy <ethan.twardy@gmail.com>
//
// Copyright 2023, Ethan Twardy. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

{{#defaultPrivileges}}
/// The default privileges required for accessing {{componentName}} instances.
pub struct DefaultPrivileges;
impl redfish_core::privilege::OperationPrivilegeMapping for DefaultPrivileges {
    type Get = {{{get}}};
    type Head = {{{head}}};
    type Post = {{{post}}};
    type Put = {{{put}}};
    type Patch = {{{patch}}};
    type Delete = {{{delete}}};
}
{{/defaultPrivileges}}

{{#subcomponentPrivilegeOverrides}}
/// The privileges required for accessing {{componentName}} instances that as properties of a {{owningComponent}}
/// instance.
pub struct {{owningComponent}}Privileges;
{{#privileges}}
impl redfish_core::privilege::OperationPrivilegeMapping for {{owningComponent}}Privileges {
    type Get = {{{get}}};
    type Head = {{{head}}};
    type Post = {{{post}}};
    type Put = {{{put}}};
    type Patch = {{{patch}}};
    type Delete = {{{delete}}};
}
{{/privileges}}
{{/subcomponentPrivilegeOverrides}}

/// This endpoint implements the {{componentName}} component.
{{#hasOwningComponents}}
///
/// It can be mounted on the following components:
{{/hasOwningComponents}}
{{#owningComponents}}
/// * [{{componentName}}][{{componentType}}]
{{/owningComponents}}
pub struct {{componentName}}<S, P>
where
    S: Clone,
{
    router: axum::routing::MethodRouter<S>,
    privilege_marker: std::marker::PhantomData<fn() -> P>,
{{#subcomponents}}
    {{snakeCaseName}}: Option<axum::Router<S>>,
{{/subcomponents}}
{{#actions}}
    {{snakeCaseName}}: Option<axum::routing::MethodRouter<S>>,
{{/actions}}
}

{{#defaultPrivileges}}
impl<S> Default for {{componentName}}<S, DefaultPrivileges>
where
    S: Clone,
{
    fn default() -> Self {
        Self {
            router: Default::default(),
            privilege_marker: Default::default(),
{{#subcomponents}}
            {{snakeCaseName}}: Default::default(),
{{/subcomponents}}
{{#actions}}
            {{snakeCaseName}}: Default::default(),
{{/actions}}
        }
    }
}
{{/defaultPrivileges}}

impl<S, P> {{componentName}}<S, P>
where
    S: AsRef<dyn redfish_core::auth::AuthenticateRequest> + Clone + Send + Sync + 'static,
    P: redfish_core::privilege::OperationPrivilegeMapping + 'static,
{{#operations}}
    <P as redfish_core::privilege::OperationPrivilegeMapping>::{{pascalCaseName}}: Send,
{{/operations}}
{{#missingPostOperation}}
    <P as redfish_core::privilege::OperationPrivilegeMapping>::Post: Send,
{{/missingPostOperation}}
{
{{#operations}}
    pub fn {{snakeCaseName}}<H, T>(mut self, handler: H) -> Self
    where
        H: axum::handler::Handler<T, S, axum::body::Body>,
        T: 'static,
    {
        self.router = self.router.{{snakeCaseName}}(
            |auth: redfish_core::extract::RedfishAuth<P::{{pascalCaseName}}>,
             axum::extract::State(state): axum::extract::State<S>,
             mut request: axum::http::Request<axum::body::Body>| async {
                request.extensions_mut().insert(auth.user);
                handler.call(request, state).await
            },
        );
        self
    }

{{/operations}}
{{#subcomponents}}
    /// Serves an instance of a [{{pascalCaseName}}][{{componentType}}].
    pub fn {{snakeCaseName}}(mut self, {{snakeCaseName}}: axum::Router<S>) -> Self {
        self.{{snakeCaseName}} = Some({{snakeCaseName}});
        self
    }

{{/subcomponents}}
{{#actions}}
    /// Perform the {{pascalCaseName}} operation on this {{componentName}} instance.
    pub fn {{snakeCaseName}}<H, T>(mut self, handler: H) -> Self
    where
        H: axum::handler::Handler<T, S, axum::body::Body>,
        T: 'static,
    {
        self.{{snakeCaseName}} = Some(axum::routing::post(
            |auth: redfish_core::extract::RedfishAuth<P::Post>,
             axum::extract::State(state): axum::extract::State<S>,
             mut request: axum::http::Request<axum::body::Body>| async {
                request.extensions_mut().insert(auth.user);
                handler.call(request, state).await
            },
        ));
        self
    }

{{/actions}}
    pub fn into_router(self) -> axum::Router<S> {
        let Self {
            router,
{{#subcomponents}}
            {{snakeCaseName}},
{{/subcomponents}}
{{#actions}}
            {{snakeCaseName}},
{{/actions}}
            ..
        } = self;
        let result = axum::Router::default();
{{#subcomponents}}
        let result = match {{snakeCaseName}} {
            Some(router) => result.nest("{{componentPath}}", router),
            None => result,
        };
{{/subcomponents}}
{{#actions}}
        let result = match {{snakeCaseName}} {
            Some(router) => result.route("/Actions/{{componentName}}.{{pascalCaseName}}", router),
            None => result,
        };
{{/actions}}
        result.route(
            "/",
            router.fallback(|| async {
                (
                    axum::http::StatusCode::METHOD_NOT_ALLOWED,
                    axum::Json(redfish_core::error::one_message({{baseRegistry}}::OperationNotAllowed.into())),
                )
            }),
        )
    }
}
