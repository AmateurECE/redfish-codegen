// Generated by redfish-codegen. Do not modify.
// Author: Ethan D. Twardy <ethan.twardy@gmail.com>
//
// Copyright 2023, Ethan Twardy. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// This endpoint implements the {{componentName}} component.
{{#hasOwningComponents}}
///
/// It can be mounted on the following components:
{{/hasOwningComponents}}
{{#owningComponents}}
/// * [{{componentName}}][{{componentType}}]
{{/owningComponents}}
#[derive(Default)]
pub struct {{componentName}}<S>
where
    S: Clone,
{
    router: axum::routing::MethodRouter<S>,
{{#subcomponents}}
    {{snakeCaseName}}: Option<axum::Router<S>>,
{{/subcomponents}}
}

impl<S> {{componentName}}<S>
where
    S: AsRef<dyn redfish_core::auth::AuthenticateRequest> + Clone + Send + Sync + 'static,
{
{{#operations}}
    pub fn {{snakeCaseName}}<H, T>(mut self, handler: H) -> Self
    where
        H: axum::handler::Handler<T, S, axum::body::Body>,
        T: 'static,
    {
        self.router = self.router.{{snakeCaseName}}(
            |auth: redfish_core::extract::RedfishAuth<{{requiredPrivilege}}>,
             axum::extract::State(state): axum::extract::State<S>,
             mut request: axum::http::Request<axum::body::Body>| async {
                request.extensions_mut().insert(auth.user);
                handler.call(request, state).await
            },
        );
        self
    }

{{/operations}}
{{#subcomponents}}
    /// Serves an instance of a [{{pascalCaseName}}][{{componentType}}].
    pub fn {{snakeCaseName}}(mut self, {{snakeCaseName}}: axum::Router<S>) -> Self {
        self.{{snakeCaseName}} = Some({{snakeCaseName}});
        self
    }

{{/subcomponents}}
    pub fn into_router(self) -> axum::Router<S> {
        let Self {
            router,
{{#subcomponents}}
            {{snakeCaseName}},
{{/subcomponents}}
        } = self;
        let result = axum::Router::default();
{{#subcomponents}}
        let result = match {{snakeCaseName}} {
            Some(router) => result.nest("{{componentPath}}", router),
            None => result,
        };
{{/subcomponents}}
        result.route(
            "/",
            router.fallback(|| async {
                (
                    axum::http::StatusCode::METHOD_NOT_ALLOWED,
                    axum::Json(redfish_core::error::one_message({{baseRegistry}}::OperationNotAllowed.into())),
                )
            }),
        )
    }
}
